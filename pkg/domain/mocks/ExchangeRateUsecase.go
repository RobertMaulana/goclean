// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "goclean/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// ExchangeRateUsecase is an autogenerated mock type for the ExchangeRateUsecase type
type ExchangeRateUsecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, date
func (_m *ExchangeRateUsecase) Delete(ctx context.Context, date string) error {
	ret := _m.Called(ctx, date)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetExchangeRateByCurrency provides a mock function with given fields: ctx, symbol, startDate, endDate
func (_m *ExchangeRateUsecase) GetExchangeRateByCurrency(ctx context.Context, symbol string, startDate string, endDate string) ([]domain.ExchangeRate, error) {
	ret := _m.Called(ctx, symbol, startDate, endDate)

	var r0 []domain.ExchangeRate
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []domain.ExchangeRate); ok {
		r0 = rf(ctx, symbol, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ExchangeRate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, symbol, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExchangeRateByDate provides a mock function with given fields: ctx, startDate, endDate
func (_m *ExchangeRateUsecase) GetExchangeRateByDate(ctx context.Context, startDate string, endDate string) ([]domain.ExchangeRate, error) {
	ret := _m.Called(ctx, startDate, endDate)

	var r0 []domain.ExchangeRate
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []domain.ExchangeRate); ok {
		r0 = rf(ctx, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ExchangeRate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExchangeRateBySingleDate provides a mock function with given fields: ctx, symbol, date
func (_m *ExchangeRateUsecase) GetExchangeRateBySingleDate(ctx context.Context, symbol string, date string) ([]domain.ExchangeRate, error) {
	ret := _m.Called(ctx, symbol, date)

	var r0 []domain.ExchangeRate
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []domain.ExchangeRate); ok {
		r0 = rf(ctx, symbol, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ExchangeRate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, symbol, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExchangeRateBySingleDateOnly provides a mock function with given fields: ctx, date
func (_m *ExchangeRateUsecase) GetExchangeRateBySingleDateOnly(ctx context.Context, date string) ([]domain.ExchangeRate, error) {
	ret := _m.Called(ctx, date)

	var r0 []domain.ExchangeRate
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.ExchangeRate); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ExchangeRate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, payload
func (_m *ExchangeRateUsecase) Store(ctx context.Context, payload *domain.ExchangeRate) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ExchangeRate) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, payload
func (_m *ExchangeRateUsecase) Update(ctx context.Context, payload *domain.ExchangeRate) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ExchangeRate) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
